/// <reference types="acceptjs" />
import PropTypes from 'prop-types';
import React from 'react';
export declare enum AuthorizeNetScriptUrl {
    Production = "https://js.authorize.net/v1/Accept.js",
    Sandbox = "https://jstest.authorize.net/v1/Accept.js"
}
export interface FormType {
    cardNumber: string;
    cardCode: string;
    expDate: string;
}
export interface State {
    apiErrors: string[];
    values: FormType;
    focused?: keyof FormType;
}
export interface Props {
    environment: 'sandbox' | 'production';
    clientKey: string;
    apiLoginId: string;
    onSuccess?: (Response: Accept.Response, formValues: FormType) => void;
    onError?: (errors: string[]) => void;
    amount?: number;
    component?: React.FunctionComponent<InjectedProps>;
    render?: React.FunctionComponent<InjectedProps>;
    children?: React.FunctionComponent<InjectedProps>;
    initialState?: State;
}
declare type TPropTypes = {
    [T in keyof Props]: PropTypes.Validator<Props[T]> | PropTypes.Requireable<Props[T]>;
};
export interface InjectedProps extends State {
    amount?: number;
    validationErrors: {
        [K in keyof FormType]: boolean;
    };
    handleSubmit: () => void;
    handleFocus: (field: keyof FormType, ev: React.FocusEvent<HTMLInputElement>) => React.FocusEvent<HTMLInputElement>;
    handleBlur: (ev: React.FocusEvent<HTMLInputElement>) => React.FocusEvent<HTMLInputElement>;
    handleChange: (field: keyof FormType, ev: React.ChangeEvent<HTMLInputElement>) => React.ChangeEvent<HTMLInputElement>;
}
export default class FormContainer extends React.Component<Props, State> {
    static propTypes: Partial<TPropTypes>;
    static runValidations: (values: FormType) => {
        [K in keyof FormType]: boolean;
    };
    state: State;
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    submitHandler(): Promise<Accept.Response>;
    changeHandler(field: keyof FormType, ev: React.ChangeEvent<HTMLInputElement>): React.ChangeEvent<HTMLInputElement>;
    focusHandler(field: keyof FormType, ev: React.FocusEvent<HTMLInputElement>): React.FocusEvent<HTMLInputElement>;
    blurHandler(ev: React.FocusEvent<HTMLInputElement>): React.FocusEvent<HTMLInputElement>;
    render(): JSX.Element | null;
}
export {};
