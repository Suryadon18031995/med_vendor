import React from 'react';
declare global {
    interface Window {
        AuthorizeNetIFrame: {
            onReceiveCommunication: (queryStr: string) => void;
        };
    }
}
declare type TransactionResponse = {
    accountNumber: string;
    accountType: 'Visa' | 'MasterCard' | 'Discover' | 'AmericanExpress' | 'DinersClub' | 'JCB' | 'eCheck';
    authCode: string;
    avsResultCode: 'A' | 'B' | 'E' | 'G' | 'N' | 'P' | 'R' | 'S' | 'U' | 'W' | 'X' | 'Y' | 'Z';
    cvvResultCode: 'M' | 'N' | 'P' | 'S' | 'U';
    errors?: ReadonlyArray<{
        errorCode: string;
        errorText: string;
    }>;
    messages: ReadonlyArray<{
        code: string;
        description: string;
    }>;
    responseCode: '1' | '2' | '3' | '4';
    transId: string;
};
declare type Message = {
    action: 'resizeWindow';
    width: number;
    height: number;
} | {
    action: 'cancel';
} | {
    action: 'transactResponse';
    response: string;
};
declare type AcceptHostedProps = {
    style?: React.CSSProperties;
    className?: string;
    formToken: string;
    mode?: 'sandbox' | 'production';
    type?: 'redirect' | 'iframe';
    onReceiveCommunication?: (queryStr: string) => void;
    onMessage?: (message: Message) => void;
    onCancel?: () => void;
    onResize?: (width: number, height: number) => void;
    onTransact?: (response: TransactionResponse) => void;
};
export declare const AcceptHosted: React.FC<AcceptHostedProps>;
export default AcceptHosted;
